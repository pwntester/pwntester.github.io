<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploit on &lt;/pwntester&gt;</title>
    <link>http://www.pwntester.com/categories/exploit/</link>
    <description>Recent content in exploit on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2013 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.pwntester.com/categories/exploit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fusion level04 write-up</title>
      <link>http://www.pwntester.com/blog/2013/12/31/fusion-level04-write-up/</link>
      <pubDate>Tue, 31 Dec 2013 19:00:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/31/fusion-level04-write-up/</guid>
      <description>In this level we have to bypass a bunch of protections:
The stack based vulnerability is easy to find. It is in the base64_decode() function. It takes the output buffer length as an argument, but the it overwrites it with a new value based on the input buffer length. So we are going to be able to control how many bytes we want to write in the output buffer:
*output_length = input_length / 4 * 3;  Now in order to send a valid request we need to provide a password the server generates when it loads but then it reuses for every connection.</description>
    </item>
    
    <item>
      <title>Fusion level03 write-up</title>
      <link>http://www.pwntester.com/blog/2013/12/31/fusion-level03-write-up/</link>
      <pubDate>Tue, 31 Dec 2013 17:34:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/31/fusion-level03-write-up/</guid>
      <description>Fusion level03 In this level we have to bypass ASLR and NX again:
Before going into the stack overflow details, lets get a valid request to the server. When we connect to the server we are presented with a token that is later used to calculate the MAC code of our request.
HMAC(EVP_sha1(), token, strlen(token), gRequest, gRequestSize, result, &amp;amp;len);  The application is calculating the MAC of whatever is stored in &amp;ldquo;gRequest&amp;rdquo; (token+JSON request) using SHA1 as the hashing algorithm, &amp;ldquo;token&amp;rdquo; as the encryption key and store the MAC in the memory pointed by &amp;ldquo;result&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Fusion level02 write-up</title>
      <link>http://www.pwntester.com/blog/2013/12/30/fusion-level02-write-up/</link>
      <pubDate>Mon, 30 Dec 2013 16:35:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/30/fusion-level02-write-up/</guid>
      <description>Fusion level02 This level has the following protections:
And the code looks like:
#include &amp;quot;../common/common.c&amp;quot; #define XORSZ 32 void cipher(unsigned char *blah, size_t len) { static int keyed; static unsigned int keybuf[XORSZ]; int blocks; unsigned int *blahi, j; if(keyed == 0) { int fd; fd = open(&amp;quot;/dev/urandom&amp;quot;, O_RDONLY); if(read(fd, &amp;amp;keybuf, sizeof(keybuf)) != sizeof(keybuf)) exit(EXIT_FAILURE); close(fd); keyed = 1; } blahi = (unsigned int *)(blah); blocks = (len / 4); if(len &amp;amp; 3) blocks += 1; for(j = 0; j &amp;lt; blocks; j++) { blahi[j] ^= keybuf[j % XORSZ]; } } void encrypt_file() { // http://thedailywtf.</description>
    </item>
    
    <item>
      <title>Fusion level01 write-up</title>
      <link>http://www.pwntester.com/blog/2013/12/29/fusion-level01-write-up/</link>
      <pubDate>Sun, 29 Dec 2013 10:14:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/29/fusion-level01-write-up/</guid>
      <description>Fusion level01 This level implements stack/heap/mmap ASLR but the stack is still executable:
The code provided is exactly the same but there is no info leak this time.
We start off overwriting EIP to crash the application and taking a look:
python -c &#39;print &amp;quot;GET &amp;quot; + &amp;quot;A&amp;quot;*139 + &amp;quot;DDDD&amp;quot; + &amp;quot; HTTP/1.1&amp;quot; + &amp;quot;\x90&amp;quot;*16 + &amp;quot;B&amp;quot;*80&#39;| nc localhost 20001  Monitoring with gdb we get:
(gdb) attach 1521 Attaching to program: /opt/fusion/bin/level01, process 1521 Reading symbols from /lib/i386-linux-gnu/libc.</description>
    </item>
    
    <item>
      <title>Fusion level00 write-up</title>
      <link>http://www.pwntester.com/blog/2013/12/27/fusion-level00-write-up/</link>
      <pubDate>Fri, 27 Dec 2013 17:45:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/27/fusion-level00-write-up/</guid>
      <description>Fusion level00 This level has no protections at all:
The code looks like:
#include &amp;quot;../common/common.c&amp;quot; int fix_path(char *path) { char resolved[128]; if(realpath(path, resolved) == NULL) return 1; // can&#39;t access path. will error trying to open strcpy(path, resolved); } char *parse_http_request() { char buffer[1024]; char *path; char *q; // printf(&amp;quot;[debug] buffer is at 0x%08x :-)\n&amp;quot;, buffer); :D if(read(0, buffer, sizeof(buffer)) &amp;lt;= 0) errx(0, &amp;quot;Failed to read from remote host&amp;quot;); if(memcmp(buffer, &amp;quot;GET &amp;quot;, 4) !</description>
    </item>
    
    <item>
      <title>RCE via XStream object deserialization</title>
      <link>http://www.pwntester.com/blog/2013/12/23/rce-via-xstream-object-deserialization38/</link>
      <pubDate>Mon, 23 Dec 2013 10:15:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/23/rce-via-xstream-object-deserialization38/</guid>
      <description>When researching SpringMVC RESTful APIs and their XXE vulnerabilities I found that XStream was not vulnerable to XXE because it ignored the &amp;lt;DOCTYPE /&amp;gt; blocks. Curious about it I decided to took a deeper look at XStream and found out that its not just a simple marshalling library as JAXB but a much more powerful serializing library capable of serializing to an XML representation really complex types and not just POJOs.</description>
    </item>
    
    <item>
      <title>CVE-2011-2894: Deserialization Spring RCE</title>
      <link>http://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/</link>
      <pubDate>Mon, 16 Dec 2013 20:04:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/</guid>
      <description>This post is about an old RCE vulnerability in applications deserializing streams from untrusted sources and having Spring on their classpaths. I wrote an exploit for it some time ago to learn about this kind of serializing vulnerabilities and decided to make it public since I recently read an study by WhiteSource Software saying that this vulneravility is in the top 5 vulnerabilities that are more prevalent due to a lack of Open Source component update.</description>
    </item>
    
  </channel>
</rss>