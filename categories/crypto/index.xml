<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crypto on &lt;/pwntester&gt;</title>
    <link>http://pwntester.com/categories/crypto/</link>
    <description>Recent content in Crypto on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Apr 2014 18:50:00 +0000</lastBuildDate>
    
	<atom:link href="http://pwntester.com/categories/crypto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DragonSector Crypto 100</title>
      <link>http://pwntester.com/blog/2014/04/27/dragonsector-crypto-100/</link>
      <pubDate>Sun, 27 Apr 2014 18:50:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/04/27/dragonsector-crypto-100/</guid>
      <description>In this task we have to win a lottery game:
Basically each coupon costs $5 and we have $100 to spend. If we try to withdraw our money we get the amount of money we need to get our flag:
To show they are playing fairly, the give you a verification id that its the value you have to guess concatenated with a random salt to reach the AES 16 bytes block that is used to encrypt the string.</description>
    </item>
    
    <item>
      <title>NuitDuHack 2014 Crypto Write Ups</title>
      <link>http://pwntester.com/blog/2014/04/06/nuitduhack-2014-crypto-write-ups/</link>
      <pubDate>Sun, 06 Apr 2014 20:00:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/04/06/nuitduhack-2014-crypto-write-ups/</guid>
      <description>Carbonara We are given the following ciphertext:
%96 7=28 7@C E9:D 492= :D iQx&amp;gt;A6C2E@C xF=:FD r26D2C s:GFDQ]
A simple shift shows interesting results:
ciphertext = &amp;quot;%96 7=28 7@C E9:D 492= :D iQx&amp;gt;A6C2E@C xF=:FD r26D2C s:GFDQ]&amp;quot; size = len(ciphertext) for i in range(0,100): result=&amp;quot;&amp;quot; for c in ciphertext: if ord(c) &amp;gt; 126 or ord(c) &amp;lt; 33: result += c else: first = ord(c)+i if first &amp;gt; 90: first = 64 + (first - 90) result += chr(first) print(result)  Here is were the history classes prove valuable, flag is:</description>
    </item>
    
    <item>
      <title>#hackyou2014 Crypto400 write-up</title>
      <link>http://pwntester.com/blog/2014/01/17/hackyou2014-crypto400-write-up/</link>
      <pubDate>Fri, 17 Jan 2014 18:14:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/17/hackyou2014-crypto400-write-up/</guid>
      <description>In this level we are said that:
 We have intercepted communication in a private network. It is used a strange protocol based on RSA cryptosystem.
Can you still prove that it is not secure enough and get the flag?
 We are given a pcap file with a bunch of transmissions generated with this script:
#!/usr/bin/python import sys import struct import zlib import socket class Client: def __init__(self, ip): #init self.</description>
    </item>
    
    <item>
      <title>#hackyou2014 Crypto300 write-up</title>
      <link>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto300-write-up/</link>
      <pubDate>Thu, 16 Jan 2014 22:24:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto300-write-up/</guid>
      <description>In this level we are presented with a crypto system based on Matrix operations:
#!/usr/bin/python import random from struct import pack def Str2matrix(s): #convert string to 4x4 matrix return [map(lambda x : ord(x), list(s[i:i+4])) for i in xrange(0, len(s), 4)] def Matrix2str(m): #convert matrix to string return &#39;&#39;.join(map(lambda x : &#39;&#39;.join(map(lambda y : pack(&#39;!H&#39;, y), x)), m)) def Generate(password): #generate key matrix random.seed(password) return [[random.randint(0,64) for i in xrange(4)] for j in xrange(4)] def Multiply(A,B): #multiply two 4x4 matrix C = [[0 for i in xrange(4)] for j in xrange(4)] for i in xrange(4): for j in xrange(4): for k in xrange(4): C[i][j] += A[i][k] * B[k][j] return C def Encrypt(fname): #encrypt file key = Generate(&#39;&#39;) data = open(fname, &#39;rb&#39;).</description>
    </item>
    
    <item>
      <title>#hackyou2014 Crypto200 write-up</title>
      <link>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto200-write-up/</link>
      <pubDate>Thu, 16 Jan 2014 20:43:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto200-write-up/</guid>
      <description>In this level we are said that our challange is login with administrator role in a service listening on hackyou2014tasks.ctf.su 7777 We are given the following source code:
#!/usr/bin/python from math import sin from urlparse import parse_qs from base64 import b64encode from base64 import b64decode from re import match SALT = &#39;&#39; USERS = set() KEY = &#39;&#39;.decode(&#39;hex&#39;) def xor(a, b): return &#39;&#39;.join(map(lambda x : chr(ord(x[0]) ^ ord(x[1])), zip(a, b * 100))) def hashme(s): #my secure hash function def F(X,Y,Z): return ((~X &amp;amp; Z) | (~X &amp;amp; Z)) &amp;amp; 0xFFFFFFFF def G(X,Y,Z): return ((X &amp;amp; Z) | (~Z &amp;amp; Y)) &amp;amp; 0xFFFFFFFF def H(X,Y,Z): return (X ^ Y ^ Y) &amp;amp; 0xFFFFFFFF def I(X,Y,Z): return (Y ^ (~Z | X)) &amp;amp; 0xFFFFFFFF def ROL(X,Y): return (X &amp;lt;&amp;lt; Y | X &amp;gt;&amp;gt; (32 - Y)) &amp;amp; 0xFFFFFFFF A = 0x67452301 B = 0xEFCDAB89 C = 0x98BADCFE D = 0x10325476 X = [int(0xFFFFFFFF * sin(i)) &amp;amp; 0xFFFFFFFF for i in xrange(256)] for i,ch in enumerate(s): k, l = ord(ch), i &amp;amp; 0x1f A = (B + ROL(A + F(B,C,D) + X[k], l)) &amp;amp; 0xFFFFFFFF B = (C + ROL(B + G(C,D,A) + X[k], l)) &amp;amp; 0xFFFFFFFF C = (D + ROL(C + H(D,A,B) + X[k], l)) &amp;amp; 0xFFFFFFFF D = (A + ROL(D + I(A,B,C) + X[k], l)) &amp;amp; 0xFFFFFFFF return &#39;&#39;.</description>
    </item>
    
    <item>
      <title>#hackyou2014 Crypto100 write-up</title>
      <link>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto100-write-up/</link>
      <pubDate>Thu, 16 Jan 2014 20:26:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/16/hackyou2014-crypto100-write-up/</guid>
      <description>In this level we are asked to break a code and decrypt msg002.enc. We are given the encryptor code without the key:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char **argv) { if (argc != 3) { printf(&amp;quot;USAGE: %s INPUT OUTPUT\n&amp;quot;, argv[0]); return 0; } FILE* input = fopen(argv[1], &amp;quot;rb&amp;quot;); FILE* output = fopen(argv[2], &amp;quot;wb&amp;quot;); if (!input || !output) { printf(&amp;quot;Error\n&amp;quot;); return 0; } char k[] = &amp;quot;CENSORED&amp;quot;; char c, p, t = 0; int i = 0; while ((p = fgetc(input)) !</description>
    </item>
    
  </channel>
</rss>