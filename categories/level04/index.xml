<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>level04 on &lt;/pwntester&gt;</title>
    <link>http://pwntester.com/categories/level04/</link>
    <description>Recent content in level04 on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2013 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://pwntester.com/categories/level04/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fusion level04 write-up</title>
      <link>http://pwntester.com/blog/2013/12/31/fusion-level04-write-up/</link>
      <pubDate>Tue, 31 Dec 2013 19:00:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2013/12/31/fusion-level04-write-up/</guid>
      <description>In this level we have to bypass a bunch of protections:
The stack based vulnerability is easy to find. It is in the base64_decode() function. It takes the output buffer length as an argument, but the it overwrites it with a new value based on the input buffer length. So we are going to be able to control how many bytes we want to write in the output buffer:
*output_length = input_length / 4 * 3;  Now in order to send a valid request we need to provide a password the server generates when it loads but then it reuses for every connection.</description>
    </item>
    
  </channel>
</rss>