<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on &lt;/pwntester&gt;</title>
    <link>http://pwntester.com/categories/java/</link>
    <description>Recent content in Java on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jan 2014 19:10:00 +0000</lastBuildDate>
    
	<atom:link href="http://pwntester.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Struts 2 devmode: An OGNL backdoor</title>
      <link>http://pwntester.com/blog/2014/01/21/struts-2-devmode-an-ognl-backdoor/</link>
      <pubDate>Tue, 21 Jan 2014 19:10:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/21/struts-2-devmode-an-ognl-backdoor/</guid>
      <description>There are many Struts 2 developers familiar with the Struts 2 development mode on which more verbose logs are produced and handy resource reloading is done on a request basis to avoid restarting the server every time we change a property, validator and so on. What it is not so well known (actually it doesnâ€™t even appear in the Struts 2 devmode site) is that it enables a OGNL injection backdoor allowing the developers to check their Value Stacks with ease and from a handy OGNL console or request parameter.</description>
    </item>
    
    <item>
      <title>Time to update your OGNL payloads</title>
      <link>http://pwntester.com/blog/2014/01/20/time-to-update-your-ognl-payloads/</link>
      <pubDate>Mon, 20 Jan 2014 15:39:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2014/01/20/time-to-update-your-ognl-payloads/</guid>
      <description>OGNL is an expression language for getting and setting properties of Java objects, plus other extras such as list projection, selection, lambda expressions and method invocation. So if attackers can provide the OGNL engine with arbitrary OGNL expressions, they will be able to execute arbitrary code on the application server and/or access and modify any value stored in the Struts 2 value stack.
Struts 2 provided an addition layer of protection by disabling static method invocation so that methods like java.</description>
    </item>
    
    <item>
      <title>More on XStream RCE: SpringMVC WS</title>
      <link>http://pwntester.com/blog/2013/12/24/more-on-xstream-rce-springmvc-ws/</link>
      <pubDate>Tue, 24 Dec 2013 10:25:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2013/12/24/more-on-xstream-rce-springmvc-ws/</guid>
      <description>Continuing my previous post where I mentioned that the XStream RCE issue issue also affected SpringMVC RESTful WebServices using the XStream SpringOXM wrapper, I wanted to share a POC server. The code is quite simple and can be found in the XStreamServer GitHub Repo. It contains a WebService defined by the ContactController:
@Controller @RequestMapping(&amp;quot;/contacts&amp;quot;) public class ContactController { @Autowired private ContactRepository contactRepository; @RequestMapping( value = &amp;quot;/{id}&amp;quot;, method = RequestMethod.GET ) @ResponseStatus(HttpStatus.</description>
    </item>
    
    <item>
      <title>RCE via XStream object deserialization</title>
      <link>http://pwntester.com/blog/2013/12/23/rce-via-xstream-object-deserialization38/</link>
      <pubDate>Mon, 23 Dec 2013 10:15:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2013/12/23/rce-via-xstream-object-deserialization38/</guid>
      <description>When researching SpringMVC RESTful APIs and their XXE vulnerabilities I found that XStream was not vulnerable to XXE because it ignored the &amp;lt;DOCTYPE /&amp;gt; blocks. Curious about it I decided to took a deeper look at XStream and found out that its not just a simple marshalling library as JAXB but a much more powerful serializing library capable of serializing to an XML representation really complex types and not just POJOs.</description>
    </item>
    
    <item>
      <title>CVE-2011-2894: Deserialization Spring RCE</title>
      <link>http://pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/</link>
      <pubDate>Mon, 16 Dec 2013 20:04:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/</guid>
      <description>This post is about an old RCE vulnerability in applications deserializing streams from untrusted sources and having Spring on their classpaths. I wrote an exploit for it some time ago to learn about this kind of serializing vulnerabilities and decided to make it public since I recently read an study by WhiteSource Software saying that this vulneravility is in the top 5 vulnerabilities that are more prevalent due to a lack of Open Source component update.</description>
    </item>
    
    <item>
      <title>Abusing jar:// downloads</title>
      <link>http://pwntester.com/blog/2013/11/28/abusing-jar-downloads/</link>
      <pubDate>Thu, 28 Nov 2013 20:45:00 +0000</pubDate>
      
      <guid>http://pwntester.com/blog/2013/11/28/abusing-jar-downloads/</guid>
      <description>Recently I saw Timothy Morgan (@ecbftw) presentation on OWASP AppSec USA&amp;rsquo;13 (Video) where he explained a clever trick to exploit a XXE or SSRF vulnerability fooling the server to fetch a file for us using the jar:// protocol. The trick is to serve the file but keep the connection opened, so our file is effectively uploaded to the victim server and stored on a temporary location until we close the connection.</description>
    </item>
    
  </channel>
</rss>