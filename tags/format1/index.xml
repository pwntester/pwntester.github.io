<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>format1 on &lt;/pwntester&gt;</title>
    <link>http://www.pwntester.com/tags/format1/</link>
    <description>Recent content in format1 on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2013 17:29:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.pwntester.com/tags/format1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protostar format0-4 write-ups</title>
      <link>http://www.pwntester.com/blog/2013/12/19/protostar-format0-4-write-ups/</link>
      <pubDate>Thu, 19 Dec 2013 17:29:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/19/protostar-format0-4-write-ups/</guid>
      <description>Format0 In Format0 we are given the following vulnerable code:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; void vuln(char *string) { volatile int target; char buffer[64]; target = 0; sprintf(buffer, string); if(target == 0xdeadbeef) { printf(&amp;quot;you have hit the target correctly :)\n&amp;quot;); } } int main(int argc, char **argv) { vuln(argv[1]); }  This is not really a format string vulnerability, our argument is going to be written in buffer with no size checks and buffer is just above target so we can overwrite it:</description>
    </item>
    
  </channel>
</rss>