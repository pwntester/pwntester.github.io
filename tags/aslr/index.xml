<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aslr on &lt;/pwntester&gt;</title>
    <link>http://www.pwntester.com/tags/aslr/</link>
    <description>Recent content in aslr on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Mar 2014 22:09:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.pwntester.com/tags/aslr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Codegate 2k14 AngryDoraemon (pwnable 250) write up</title>
      <link>http://www.pwntester.com/blog/2014/03/21/codegate-2k14-angrydoraemon-pwnable-250-write-up/</link>
      <pubDate>Fri, 21 Mar 2014 22:09:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2014/03/21/codegate-2k14-angrydoraemon-pwnable-250-write-up/</guid>
      <description>This is an easy pwnable level but very interesting since there are many ways to exploit it so lets start checking the binary protections:
Not bad, ASLR and NX enabled and the stack is protected with a Canary. Lets analyze what does it do &amp;hellip; Running the binary opens a socket in port 8888 which we can connect to and receive a menu with options to attack Doraemon:
Normally I play with the binary and try to get a crash which is simple in this case, but this time I decided to do some Reversing that payed off very well, I found the following vulnerabilities:</description>
    </item>
    
  </channel>
</rss>