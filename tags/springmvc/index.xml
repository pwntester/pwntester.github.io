<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringMVC on &lt;/pwntester&gt;</title>
    <link>http://www.pwntester.com/tags/springmvc/</link>
    <description>Recent content in SpringMVC on &lt;/pwntester&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Dec 2013 10:25:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.pwntester.com/tags/springmvc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>More on XStream RCE: SpringMVC WS</title>
      <link>http://www.pwntester.com/blog/2013/12/24/more-on-xstream-rce-springmvc-ws/</link>
      <pubDate>Tue, 24 Dec 2013 10:25:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/12/24/more-on-xstream-rce-springmvc-ws/</guid>
      <description>Continuing my previous post where I mentioned that the XStream RCE issue issue also affected SpringMVC RESTful WebServices using the XStream SpringOXM wrapper, I wanted to share a POC server. The code is quite simple and can be found in the XStreamServer GitHub Repo. It contains a WebService defined by the ContactController:
@Controller @RequestMapping(&amp;quot;/contacts&amp;quot;) public class ContactController { @Autowired private ContactRepository contactRepository; @RequestMapping( value = &amp;quot;/{id}&amp;quot;, method = RequestMethod.GET ) @ResponseStatus(HttpStatus.</description>
    </item>
    
    <item>
      <title>SpringMVC vulnerable to XXE</title>
      <link>http://www.pwntester.com/blog/2013/08/23/springmvc-vulnerable-to-xxe/</link>
      <pubDate>Fri, 23 Aug 2013 08:34:00 +0000</pubDate>
      
      <guid>http://www.pwntester.com/blog/2013/08/23/springmvc-vulnerable-to-xxe/</guid>
      <description>While researching SpringMVC Restful APIs, I found out that any RESTful webservice built with SpringMVC and using JAXB as mashalling library to convert XML object representations to Java objects, was vulnerable to XML eXternal Entity Injection (XXE) attacks since the JAXB was configured to resolve external entities by default and it could not be configured to not do so.
SpringMVC uses SpringOXM (Object to XML Mapper) to automatically convert XML messages into Java objects so developers dont need to process the XML message and instantiate their own class instances, they just need to declare what type they are expecting in their controller method.</description>
    </item>
    
  </channel>
</rss>